#!/usr/bin/python
#Watch and manage tmux windows

import curses, time, shutil, threading, random, locale, sys, re, os, math
import subprocess as sp
from datetime import datetime
import notify2, cProfile
# import dbus, gobject
locale.setlocale(locale.LC_ALL, '')

FCOM             = False  # Whether to show all arguments to a command
TCOM             = False  # Whether to show command from tmux (may be different than /proc command
SHOWCHILD        = False  # Whether to show most specific currently executing command
NLINES           = 3     # Number of lines to show
SHOWLINES        = False # Whether to show lines for non-highlighted things
ALWAYSKILL       = False # Whether the kill command kills even running processes

USENOTIFY        = False  # Whether to use notification
ALWAYSURGENT     = True  # Whether notifications should always be permanent
SHOWINACTIVE     = False # Whether to show inactive commands
KEEPFOCUS        = False # Whether to keep focus of tman when opening new sessions

TIMEOUT          = 3000  # Timeout for notifications
IDLETHRESHOLD    = 60    # Seconds we can idle before a notification
LONGTHRESHOLD    = 60    # Minimum command time to send a notification on completion

MAXROWS          = 100   # Rows in curses pad
MAXCOLS          = 300   # Columns in curses pad
USEPROIFILER     = False # Whether to run a profiler

HOME             = os.path.expanduser("~")         # Home directory
LOGDIR           = HOME+"/downloads"               # Directory for writing logs
ICONPATH         = HOME+"/pictures/icons/tmux.png" # Icon path for notifications

EPOCH            = datetime.utcfromtimestamp(0)    # Epoch time for data calculations
XSERVER          = True                            # Whether the x server is available

allthreads       = []
allpanes         = []

finishedsessions = {}
idlesessions     = {}
lastcommandtime  = {}
lastcommandname  = {}
notifications    = {}

stopped          = False
toUpdate         = True
highlighted      = 0
lastUpdate       = 0
totalapps        = 0

toOpen           = False
toKill           = False
toForceKill      = False
toWrite          = False
writeMode        = False
cmdbuffer        = []
renameMode       = False
renameChar       = ''

outx             = 0
outy             = 0
rev              = 0


class col:
  RED=1 # Red
  GRN=2 # Green
  YLW=3 # Yellow
  BLU=4 # Blue
  MGN=5 # Magenta
  CYN=6 # Cyan
  WHT=7 # White
  BLK=8 # Black

class PaneInfo:
  def __init__(self,index,name,base,pid,command,activity,attached):
    self.index = index
    self.name = name
    self.base = base
    self.activity = activity
    self.attached = attached
    self.phide = False if attached == "1" else True

    #Get TMUX shell pid
    self.pid = pid

    #Get shell child's pid
    self.childpid = bash(["pgrep", "-P", pid]).split("\n")
    if len(self.childpid) > 0:
      self.childpid=self.childpid[0]

    #Get full command if it exists
    if TCOM:
      self.command = command
      self.childcommand = command
    else:
      #Get my command
      if os.path.exists("/proc/"+self.pid+"/cmdline"):
        try:
          self.command = rfl("/proc/"+self.pid+"/cmdline").replace("\00", " ")
          # writeout(self.pid)
          basecmd = self.command.split(" ")[0].split("/")[-1]
          if basecmd in ["sh","bash","zsh", "ksh", "csh", "python","python2"]:
            self.command = self.command.split(" ")[1]
        except:
          self.command = ""
      if not FCOM:
        self.command = self.command.split(" ")[0].split("/")[-1]
      #Get child command if we need it (or if base command is a shell)
      if (SHOWCHILD or self.command == "") and self.childpid != "":
        if os.path.exists("/proc/"+self.childpid+"/cmdline"):
          try:
            self.childcommand = rfl("/proc/"+self.childpid+"/cmdline").replace("\00", " ")
            # writeout(self.pid)
            basecmd = self.childcommand.split(" ")[0].split("/")[-1]
            if basecmd in ["sh","bash","zsh", "ksh", "csh", "python","python2"]:
              self.childcommand = self.childcommand.split(" ")[1]
          except:
            self.childcommand = ""
        if not FCOM:
          self.childcommand = self.childcommand.split(" ")[0].split("/")[-1]
      else:
        self.childcommand = self.command

    self.active = not (self.childcommand in ["", "bash", "/bin/bash"])

  def printInactiveInfo(self):
    global lastcommandtime
    if SHOWINACTIVE:
      writeout("["+self.command+"]",curses.color_pair(col.RED)+curses.A_BOLD,nohighlight=True)

    if not self.base in finishedsessions.keys():
      finishedsessions[self.base] = 0
    if finishedsessions[self.base] > LONGTHRESHOLD:
      notify(self.base,
        "<i>Command</i>: "+lastcommandname[self.base][1:-1]
        +"\n--------------------"
        +"\nFinished in ~"+str(finishedsessions[self.base]) + " seconds"
      )

    if finishedsessions[self.base] > 0:
      lastcommandtime[self.base] = finishedsessions[self.base]
    if self.base in lastcommandtime.keys() and lastcommandtime[self.base] > 0:
      writeout(lastcommandname[self.base],curses.color_pair(col.MGN)+curses.A_BOLD,nohighlight=True)
      writeout("("+msformat(lastcommandtime[self.base])+")",curses.color_pair(col.GRN)+curses.A_BOLD,nohighlight=True)
    finishedsessions[self.base] = 0

  #returns: whether the session is currently active
  def printActiveInfo(self):
    global finishedsessions, lastcommandtime, lastcommandname, idlesessions, notifications
    curtime = int(gettime())

    if self.command != "":
      writeout("["+self.command+"]",curses.color_pair(col.CYN)+curses.A_BOLD,nohighlight=True)
    if self.childcommand != self.command:
      if self.command == "":
        writeout("["+self.childcommand+"]",curses.color_pair(col.CYN)+curses.A_BOLD,nohighlight=True)
      else:
        writeout("["+self.childcommand+"]",curses.color_pair(col.BLU)+curses.A_BOLD,nohighlight=True)

    #Measure runtime
    stime=bash(["stat", "--format=%Y", "/proc/"+self.pid+"/"])
    if stime == "":
      return False #Process died, so move on
    sdelta = curtime-int(stime)

    finishedsessions[self.base] = sdelta
    lastcommandtime[self.base] = 0
    lastcommandname[self.base] = self.command

    #Print current command + command runtime
    timestring = msformat(sdelta)
    writeout("("+timestring+")",curses.color_pair(col.GRN)+curses.A_BOLD,nohighlight=True)

    #Time since last output
    ptime = self.activity
    pdelta = curtime - int(ptime)

    #Current command idle time
    if pdelta > 5:
      writeout("("+msformat(pdelta)+" idle)",curses.color_pair(col.YLW)+curses.A_BOLD,nohighlight=True)
    if pdelta > IDLETHRESHOLD:
      if not self.base in idlesessions.keys():
        idlesessions[self.base] = True #We were idle before we started the program
      if not idlesessions[self.base]:
        idlesessions[self.base] = True
        notify(self.base,"Session idle for more than "+str(IDLETHRESHOLD)+" seconds")
    else:
      if self.base in notifications.keys():
        notifications[self.base].close()
      idlesessions[self.base] = False
    return True #We're still alive

  #returns: whether the session is currently active
  def printInfo(self):
    if not self.active:
      self.printInactiveInfo()
      nextline()
      return True
    status = self.printActiveInfo()
    nextline()
    return status

  def handleCommands(self):
    if self.index != highlighted:
      return
    global toForceKill, toKill, toOpen
    if toForceKill:
      bash(["tmux", "kill-session", "-t", self.name])
      toForceKill = False
    if toKill:
      if not self.phide:
        bash(["tmux", "detach-client", "-s", self.name])
      elif ALWAYSKILL or not self.active:
        bash(["tmux", "kill-session", "-t", self.name])
      toKill = False
    if toOpen and self.phide:
      bash(["xfce4-terminal", "--execute", "tmux", "attach-session", "-t",self.name])
      if KEEPFOCUS:
        bash(["xdotool","windowfocus",activewid])
        bash(["xdotool","windowactivate",activewid])
      toOpen = False

  def printName(self):
    global rev
    #Set indicator
    if activesessionname == self.name: hid = "[a] "; hidcol = col.GRN
    elif self.phide:                   hid = "[x] "; hidcol = col.RED
    else:                              hid = "[o] "; hidcol = col.YLW

    #Set highlighting
    rev = curses.A_REVERSE if highlighted == self.index else 0

    #Print active / open / close indicator
    writeout(hid,curses.color_pair(hidcol)+curses.A_BOLD)

    #Print session name
    if renameMode and highlighted == self.index:
      writeout(self.base+" ",curses.color_pair(col.YLW)+curses.A_BOLD)
    elif writeMode and highlighted == self.index:
      writeout(self.base+" ",curses.color_pair(col.MGN)+curses.A_BOLD)
    else:
      writeout(self.base+" ",curses.color_pair(col.WHT)+curses.A_BOLD)

  def renameSession(self):
    global renameChar, toUpdate
    if renameChar == "<":
      bash(["tmux","rename","-t",self.name, self.name[:-1]])
    elif renameChar != "":
      bash(["tmux","rename","-t",self.name, self.name+renameChar])
    renameChar = ""
    toUpdate = True

  def sendKey(self,thekey):
    global toUpdate
    for k in thekey:
      bash(["tmux","send","-t",self.name, k])
    toUpdate = True

  def updateBuffer(self):
    global toWrite
    if toWrite:
      toWrite = False
      buffout=[f for f in bash(['tmux','capture-pane', '-p', '-S', '-', '-t', self.name]).split("\n") if f != ""]
      fname = LOGDIR+"/"+self.base+"-"+gettimestamp()
      with open(fname,'w') as logfile:
        for line in buffout:
          logfile.write(line+"\n")
      notify("tman","<b>"+self.base+"</b> buffer saved to "+fname,False)
    else:
      buffout=[f for f in bash(['tmux','capture-pane', '-p', '-t', self.name]).split("\n") if f != ""]
    return buffout

def gettimestamp():
  return datetime.utcnow().strftime("%F_%H-%M-%S")

def gettime():
  return str(int((datetime.utcnow() - EPOCH).total_seconds()))

def measureTerminal():
  global TERMCOLS, TERMROWS
  (TERMCOLS,TERMROWS) = shutil.get_terminal_size((80, 20))

def main(stdscr=""):
  global TERMCOLS, TERMROWS, USENOTIFY, XSERVER, KEEPFOCUS
  global pad, allthreads, stopped, highlighted
  global toUpdate, totalapps, toKill, toOpen, toForceKill, toWrite
  global renameMode, renameChar, writeMode, cmdbuffer

  pad = curses.newpad(MAXROWS,MAXCOLS)
  curses.start_color()
  curses.use_default_colors()
  curses.curs_set(0)
  [curses.init_pair(i, i, -1) for i in range(0, curses.COLORS)]

  #No notifications if no grphical display
  if not 'DISPLAY' in os.environ.keys():
    XSERVER = False
  elif os.environ['DISPLAY'] == "":
    XSERVER = False
  if not XSERVER:
    USENOTIFY = False
    KEEPFOCUS = False

  if USENOTIFY:
    # loop = gobject.MainLoop().run()
    # notify2.init("tmux-manager",dbus.set_default_main_loop(loop))
    notify2.init("tmux-manager")

  if USEPROIFILER:
    allthreads.append(threading.Thread(target = profilePoll,args=()))
  else:
    allthreads.append(threading.Thread(target = updatePoll,args=()))
  pad.refresh( 0,0, 0,0,TERMROWS-1,TERMCOLS-1)
  [t.start() for t in allthreads]

  #Input loop
  while True:
    c = stdscr.getch()
    if writeMode:
      if c in [27]:
        writeMode = False
        cmdbuffer = []
      elif c in [10]:
        try:
          allpanes[highlighted].sendKey(cmdbuffer)
          allpanes[highlighted].sendKey(chr(10))
          cmdbuffer = []
        except:
          pass
      elif c in [127,curses.KEY_LEFT]: #Backspcae
        cmdbuffer = cmdbuffer[:-1]
      else:
        cmdbuffer.append(chr(c))
    elif renameMode:
      if c in [10,27]:
        renameMode = False
      elif c in [127,curses.KEY_LEFT]:
        renameChar = '<'
        try:
          allpanes[highlighted].renameSession()
        except:
          pass
      elif chr(c) in "qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM-":
        renameChar = chr(c)
        try:
          allpanes[highlighted].renameSession()
        except:
          pass
    else:
      if c == curses.KEY_RESIZE:
        measureTerminal()
      elif c == ord('x')  or c == curses.KEY_LEFT:
        toKill = True
      elif c == 24: #Control x
        toForceKill = True
      elif c == ord('o') or c == curses.KEY_RIGHT or c == 10:
        if totalapps == 0:
          stopped=True
          [t.join() for t in allthreads]
          break
        toOpen = True
      elif c == curses.KEY_UP:
        highlighted -= 1
        if highlighted < 0:
          highlighted = totalapps
      elif c == curses.KEY_DOWN:
        highlighted += 1
        if highlighted == totalapps:
          highlighted = 0
      elif c == ord('w'):
        toWrite = True
      elif c == ord('r'):
        renameMode = True
      elif c == ord('i'):
        writeMode = True
      elif c == ord('q'):
      # elif c == 10: #ENTER
        stopped=True
        [t.join() for t in allthreads]
        break
    toUpdate = True

#Call notification system
def notify(title,body="",urgent=False):
  global notifications
  if not USENOTIFY: return

  if title in notifications:
    notifications[title].close()

  notifications[title] = notify2.Notification(title,body,ICONPATH)
  notifications[title].set_timeout(TIMEOUT)
  if ALWAYSURGENT or urgent:
    notifications[title].set_urgency(notify2.URGENCY_CRITICAL)
  notifications[title].show()

def profilePoll():
  cProfile.run('updatePoll()',LOGDIR+"/profileresults.txt")

#Callback for manually-polled updates
def updatePoll():
  global toUpdate, stopped, lastUpdate
  while True:
    if stopped: break
    if toUpdate or (lastUpdate > 95):
      updateStats()
      pad.noutrefresh( 0,0, 0,0,TERMROWS-1,TERMCOLS-1)
      curses.doupdate()
      pad.clear()
      toUpdate = False
      lastUpdate = 0
    else:
      lastUpdate += 1
    time.sleep(0.01)

#Move curses cursor to next line
def nextline():
  global outx, outy
  outx = 0
  outy += 1
  if outy == TERMROWS:
    outy = 0

def writeout(ss,options=0,nohighlight=False):
  global outx, outy, pad, rev
  if not nohighlight:
    options += rev
  w = ss.split(" ")
  if outx >= TERMCOLS-2:
    nextline()
  for i in range(0,len(w)):
    t = w[i]
    if i > 0:
      if outx >= TERMCOLS-2:
        nextline()
      else:
        pad.addstr(outy,outx," ",options)
        outx += 1
    while len(t) > TERMCOLS-outx:
      pad.addstr(outy,outx,t[0:TERMCOLS-outx],options)
      t = t[TERMCOLS-outx:]
      nextline()
    pad.addstr(outy,outx,t,options)
    outx += len(t)

#Return string of form WWhXXmYYs
def msformat(time):
  if time > 60:
    smin = (int)(time/60)
    ssec = time-(60*smin)
    if smin > 60:
      shour = (int)(smin/60)
      smin = smin-(60*shour)
      return str(shour)+"h"+str(smin)+"m"+str(ssec)+"s"
    return str(smin)+"m"+str(ssec)+"s"
  return str(time)+"s"

#Read first line from file
def rfl(path):
  with open(path,"r") as f:
    x=f.readline()[:-1]
  return x

#Read all lines from file
def ral(path):
  with open(path,"r") as f:
    x=f.readlines()
  return x

#Execute an arbitrary shell command (trims newline at the end)
def bash(c):
  return sp.Popen(c,stdout=sp.PIPE,stderr=sp.PIPE).communicate()[0].decode('utf-8')[:-1]

def printBuffer(buffout):
  for j in range(min(NLINES,len(buffout)),0,-1):
    if writeMode:
      writeout(buffout[-j],curses.A_BOLD+curses.color_pair(2),nohighlight=True)
      if j == 1:
        writeout(" ",curses.A_BOLD+curses.A_REVERSE,nohighlight=True)
        for char in cmdbuffer:
          if type(char) == int:
            char = chr(char)
          writeout(char,curses.A_BOLD+curses.A_REVERSE,nohighlight=True)
    else:
      writeout(buffout[-j],0,nohighlight=True)
    nextline()

def printEndBuffer(buffout):
  writeout("-"*TERMCOLS,curses.color_pair(col.WHT)+curses.A_BOLD,nohighlight=True)
  nextline()
  printBuffer(buffout)

def getTmuxStats():
  global totalapps, highlighted, outx
  #Get tmux stats
  stats = bash([
    'tmux', 'list-panes', '-a', '-F',
    "#{pane_pid} #{session_name} #{pane_current_command} #{window_activity} #{session_attached}"
  ])

  #If no tmux windows, nothing to do!
  if stats == "":
    outx = 0
    writeout("No tmux sessions!",nohighlight=True)
    totalapps = 0
    return

  stats = stats.split("\n")
  totalapps = len(stats)
  if highlighted > totalapps-1:
    highlighted = totalapps-1

  return stats

def getActiveWindowInfo():
  global activewid, activesessionname
  if XSERVER:
    activewid = bash(["xdotool", "getactivewindow"])
    activesessionname = bash(["xprop", "-id" ,activewid, "WM_NAME"]).split("]")[0].split("[")
    activesessionname = "" if len(activesessionname) <= 1 else activesessionname[1]
  else:
    activewid = ""
    activesessionname = ""

def resetCursor():
  global outx, outy
  outx = outy = 0

#Update screen stats
def updateStats():
  global allpanes
  allpanes = []
  #Reset cursor
  resetCursor()
  #Get information about the currently active window
  getActiveWindowInfo()
  #Get Tmux stats
  stats = getTmuxStats()
  for i in range(0,totalapps):
    #Get fields from line in Tmux stats
    fields = stats[i].split(" ")
    #Get pane info
    info = PaneInfo(i,fields[1],fields[1],fields[0],fields[2],fields[3],fields[4])
    #Append to list of panes
    allpanes.append(info)
    #Print indicator and session name
    info.printName()
    #Print remaining info (quit if we died while printing)
    if not info.printInfo(): continue
    #Print buffer for each item
    if SHOWLINES: printBuffer(info.updateBuffer())
    #Print buffer for highlighted item
    elif info.index == highlighted: buffout = info.updateBuffer()
    #Handle input
    info.handleCommands()
  #Print buffer at the end
  if not SHOWLINES:
    try:
      printEndBuffer(buffout)
    except UnboundLocalError:
      pass

if __name__ == "__main__":
  measureTerminal()
  curses.wrapper(main)
